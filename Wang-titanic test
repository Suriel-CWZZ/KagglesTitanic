#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>
#include <strstream>
#include<fstream>  
using namespace std;
#define MAXLEN 5
vector <vector <string> > state;//实例集
vector <string> item(MAXLEN);//对应一行实例集
struct Node{//决策树节点
	string name;
	int survive;//属性值
	int total;//到达的属性值
	vector<Node *> childs;//所有的孩子
	Node(){
		name="";
		survive =0;
		total =0 ;
	}
};
Node *root=new Node;
void Input(){
	ifstream file("train.csv");
	string s;
	while(file.good()){
		getline ( file, s, ',' );
		if(s!="")
		{
			item[0]=s;
		}
		else
		{
			break;
		}
		for(int i = 1;i < MAXLEN-1; i++){
			getline ( file, item[i], ',' );
		}
		getline ( file, item[MAXLEN-1], '\n' );
		state.push_back(item);//注意首行信息也输入进去，即属性
	}
	file.close();
}
void classify()
{
	Node *pclass1=new Node;
	Node *pclass2=new Node;
	Node *pclass3=new Node;
	pclass1->name="1";
	pclass2->name="2";
	pclass3->name="3";
	root->childs.push_back(pclass1);
	root->childs.push_back(pclass2);
	root->childs.push_back(pclass3);
	Node* now=NULL;
	for(unsigned int i=1;i<=state.size()-1;i++)
	{
		bool survive=false;
		if(state[i][MAXLEN-1]=="1")
		{
			survive=true;
		}
		if(state[i][1]=="1")
		{
			pclass1->total++;
			if(survive)
			{
				pclass1->survive++;
			}
			now=pclass1;
		}
		else if(state[i][1]=="2")
		{
			pclass2->total++;
			if(survive)
			{
				pclass2->survive++;
			}
			now=pclass2;
		}
		else
		{
			pclass3->total++;
			if(survive)
			{
				pclass3->survive++;
			}
			now=pclass3;
		}
		for(int j=2;j<MAXLEN-1;j++)
		{
			if(now->childs.empty())
			{
				Node *newnode=new Node;
				newnode->name=state[i][j];
				if(survive)
				{
					newnode->survive++;
				}
				newnode->total++;
				now->childs.push_back(newnode);
				now=newnode;
			}
			else
			{
				bool find=false;
				for(unsigned int k=1;k<=now->childs.size();k++)
				{
					if(now->childs[k-1]->name==state[i][j])
					{
						find=true;
						if(survive)
						{
							now->childs[k-1]->survive++;
						}
						now->childs[k-1]->total++;
						now=now->childs[k-1];
					}
				}
				if(!find)
				{
					Node *newnode=new Node;
					newnode->name=state[i][j];
					if(survive)
					{
						newnode->survive++;
					}
					newnode->total++;
					now->childs.push_back(newnode);
					now=newnode;
				}
			}
		}
	}
}
void DispLeaf(Node *b)
{
	if(b!=NULL)
	{
		if(b->childs.empty())
		{
			cout<<b->name<<endl;
			cout<<"survive::"<<b->survive<<endl<<"total::"<<b->total<<endl;;
		}
		for(int i=1;i<=b->childs.size();i++)
		{
			cout<<b->name<<endl;
			DispLeaf(b->childs[i-1]);
		}
	}
}
void train()
{
	string a[4];
	for(int i=1;i<=4;i++)
	{
		cin>>a[i-1];
	}
	Node *now=root;
	for(int i=1;i<=3;i++)
	{
		for(unsigned int k=1;k<=now->childs.size();k++)
		{
			if(now->childs[k-1]->name==a[i])
			{
				if(i==3)
				{
					cout<<"survive::"<<now->childs[k-1]->survive<<endl<<"total::"<<now->childs[k-1]->total<<endl;
					break;
				}
				now=now->childs[k-1];
			}
		}
	}
}

int main()
{
	Input();
	classify();
	DispLeaf(root);
	train();
}
